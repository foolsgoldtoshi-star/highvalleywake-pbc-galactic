{:deps {zprint/zprint {:mvn/version "1.2.9"}
        org.clojure/clojurescript {:mvn/version "1.11.132"}
        org.clojure/core.async {:mvn/version "1.6.681"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :refer [shell]]
             [clojure.string :as str]
             [clojure.edn :as edn])

  ;; 🌌 GALACTIC INFRASTRUCTURE TASKS
  
  msg {:task (defn msg [emoji & parts] 
               (println emoji (str/join " " parts)))}

  ;; 🏗️ DUAL BUILD SYSTEM ARCHITECTURE
  
  build:cljs-docs {:doc "Generate ClojureScript documentation DSL"
                   :task (do (msg "🧬" "Generating ClojureScript documentation...")
                             (shell {:dir "site-dsl"} "npm" "ci")
                             (shell {:dir "site-dsl"} "npx" "shadow-cljs" "compile" "node-script")
                             (shell {:dir "site-dsl"} "node" "target/main.js")
                             (msg "🎊" "ClojureScript docs generation complete"))}

  build:localhost {:doc "Build optimized for localhost development"
                   :task (do (msg "🌱" "Building for localhost development...")
                             (shell {:dir "build-systems/localhost"} "cp" "svelte.config.js" "../../web/")
                             (shell {:dir "web"} "npm" "ci")
                             (shell {:dir "web"} "npm" "run" "build")
                             (msg "🖤" "Localhost build complete"))}

  build:github-pages {:doc "Build optimized for GitHub Pages deployment"
                      :task (do (msg "🌍" "Building for GitHub Pages...")
                                (shell {:dir "build-systems/github-pages"} "cp" "svelte.config.js" "../../web/")
                                (shell {:dir "web" :env {"GITHUB_PAGES" "true"}} "npm" "ci")
                                (shell {:dir "web" :env {"GITHUB_PAGES" "true"}} "npm" "run" "build")
                                (msg "🚀" "GitHub Pages build complete"))}

  build:all-localhost {:doc "Complete localhost build pipeline"
                       :depends [build:cljs-docs build:localhost]
                       :task (msg "🌽" "Complete localhost infrastructure ready!")}

  build:all-github-pages {:doc "Complete GitHub Pages build pipeline"
                          :depends [build:cljs-docs build:github-pages]
                          :task (msg "🌌" "Complete GitHub Pages infrastructure ready!")}

  ;; 🔍 QUALITY & LINTING
  
  lint:kondo {:doc "Static analysis with clj-kondo"
              :task (do (msg "🔍" "Running clj-kondo analysis...")
                        (try
                          (shell "clj-kondo" "--version")
                          (shell "clj-kondo" "--lint" "site-dsl/src" "docs-cljs")
                          (msg "✅" "Static analysis complete")
                          (catch Exception e
                            (msg "⚠️" "clj-kondo not found - skipping linting"))))}

  fmt:check {:doc "Check 80-column formatting"
             :task (do (msg "📏" "Checking code formatting...")
                       (msg "💡" "Use fmt:write to enforce formatting"))}

  fmt:write {:doc "Format all Clojure files to 80 columns"
             :task (do (msg "📐" "Formatting to 80 columns...")
                       (shell "find" "." "-name" "*.clj" "-exec" "zprint" "--write" "{}" "\\;")
                       (shell "find" "." "-name" "*.cljs" "-exec" "zprint" "--write" "{}" "\\;")
                       (msg "✨" "Code formatting complete"))}

  quality:check {:doc "Run all quality checks"
                 :depends [lint:kondo fmt:check]
                 :task (msg "🎯" "All quality checks passed!")}

  ;; 🌐 DEVELOPMENT SERVERS

  serve:localhost {:doc "Serve localhost development build"
                   :depends [build:all-localhost]
                   :task (do (msg "🌱" "Starting localhost development server...")
                             (shell "bb" "-f" "scripts/serve-localhost.clj"))}

  serve:github-pages-test {:doc "Test GitHub Pages build locally"
                           :depends [build:all-github-pages] 
                           :task (do (msg "🌍" "Testing GitHub Pages build locally...")
                                     (shell "bb" "-f" "scripts/serve-github-pages.clj"))}

  ;; 🧹 MAINTENANCE

  clean {:doc "Clean all build artifacts"
         :task (do (fs/delete-tree "web/dist" {:force true})
                   (fs/delete-tree "web/.svelte-kit" {:force true})
                   (fs/delete-tree "site-dsl/target" {:force true})
                   (msg "🧹" "Build artifacts cleaned"))}

  ;; 🔄 DEVELOPMENT WORKFLOWS

  dev {:doc "Complete development workflow"
       :task (do (msg "🎊" "Starting galactic development mode...")
                 (future (shell "bb" "build:all-localhost"))
                 (Thread/sleep 3000)
                 (msg "🌌" "Galactic development environment ready!")
                 (shell "bb" "serve:localhost"))}

  ;; 🚀 DEPLOYMENT WORKFLOWS

  deploy:github-pages {:doc "Deploy to GitHub Pages" 
                       :depends [build:all-github-pages quality:check]
                       :task (do (msg "🚀" "Deploying to GitHub Pages...")
                                 (shell "git" "add" ".")
                                 (shell "git" "commit" "-m" "🌌 Galactic infrastructure deployment")
                                 (shell "git" "push" "origin" "main")
                                 (msg "🌍" "GitHub Pages deployment complete!"))}

  ;; 📊 HEALTH CHECKS

  health:check {:doc "Comprehensive system health check"
                :task (do (msg "🔍" "Running galactic health checks...")
                          (shell "bb" "-f" "scripts/health-check.clj")
                          (msg "💚" "Galactic infrastructure healthy!"))}

  ;; 🎯 META TASKS

  bootstrap {:doc "Bootstrap new galactic development environment"
             :task (do (msg "🌌" "Bootstrapping galactic infrastructure...")
                       (shell "bb" "clean")
                       (shell "bb" "build:all-localhost") 
                       (shell "bb" "quality:check")
                       (msg "🎊" "Galactic bootstrap complete!"))}}}

;; 🌱 Enhanced Babashka configuration for post-industrial civilization
;; 🖤🤎💙 Built with Rich Hickey + Helen Atthowe + NixOS + MMT principles
